-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_sc_trig is

  constant IPBUS_SEL_WIDTH: positive := 3;
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_sc_trig(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically  generated VHDL the Sat Jan 23 14:31:26 2021 
  constant N_SLV_CSR: integer := 0;
  constant N_SLV_LOC_MASK: integer := 1;
  constant N_SLV_HOP_CFG: integer := 2;
  constant N_SLV_ZS_CFG: integer := 3;
  constant N_SLV_DTMON: integer := 4;
  constant N_SLV_SEQ: integer := 5;
  constant N_SLV_MASKS: integer := 6;
  constant N_SLAVES: integer := 7;
-- END automatically generated VHDL

    
end ipbus_decode_sc_trig;

package body ipbus_decode_sc_trig is

  function ipbus_sel_sc_trig(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically  generated VHDL the Sat Jan 23 14:31:26 2021 
    if    std_match(addr, "--------------------------0000--") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CSR, IPBUS_SEL_WIDTH)); -- csr / base 0x00000000 / mask 0x0000003c
    elsif std_match(addr, "--------------------------000100") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_LOC_MASK, IPBUS_SEL_WIDTH)); -- loc_mask / base 0x00000004 / mask 0x0000003f
    elsif std_match(addr, "--------------------------000101") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_HOP_CFG, IPBUS_SEL_WIDTH)); -- hop_cfg / base 0x00000005 / mask 0x0000003f
    elsif std_match(addr, "--------------------------000110") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_ZS_CFG, IPBUS_SEL_WIDTH)); -- zs_cfg / base 0x00000006 / mask 0x0000003f
    elsif std_match(addr, "--------------------------00100-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_DTMON, IPBUS_SEL_WIDTH)); -- dtmon / base 0x00000008 / mask 0x0000003e
    elsif std_match(addr, "--------------------------010---") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_SEQ, IPBUS_SEL_WIDTH)); -- seq / base 0x00000010 / mask 0x00000038
    elsif std_match(addr, "--------------------------10----") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_MASKS, IPBUS_SEL_WIDTH)); -- masks / base 0x00000020 / mask 0x00000030
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_sc_trig;

end ipbus_decode_sc_trig;

